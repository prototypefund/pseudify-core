#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the pseudify database pseudonymizer project
 * - (c) 2022 waldhacker UG (haftungsbeschrÃ¤nkt)
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE file that was distributed with this source code.
 */

use Waldhacker\Pseudify\Core\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Dotenv\Dotenv;
use Waldhacker\Pseudify\Core\Kernel;

set_time_limit(0);

function getCurrentDirectory(): string
{
    $fullPathToTheRunningPharArchive = Phar::running(false);
    return empty($fullPathToTheRunningPharArchive)
           ? __DIR__ . '/../../build/development/userdata/pseudify-profile-templates'
           : dirname($fullPathToTheRunningPharArchive);
}

require __DIR__ . '/../vendor/autoload.php';

$input = new ArgvInput();
if ($input->getParameterOption('--data', null, true) === null) {
    $dataDirectory = getCurrentDirectory();
} else {
    $dataDirectory = realpath($input->getParameterOption('--data', '', true));
    if ($dataDirectory === false) {
        $dataDirectory = getCurrentDirectory();
    } else {
        $arguments = array_values($_SERVER['argv']);
        $argumentIndex = array_search('--data', $arguments, true);
        if ($argumentIndex) {
            unset($arguments[$argumentIndex], $arguments[++$argumentIndex]);
        }
        $input = new ArgvInput($arguments);
    }
}

if (file_exists($dataDirectory . '/vendor/autoload.php')) {
    require $dataDirectory . '/vendor/autoload.php';
} else {
    throw new RuntimeException($dataDirectory . '/vendor/autoload.php could not be found.');
}

$dotenv = new Dotenv();
$dotenv->loadEnv($dataDirectory . '/.env');

(new Application(new Kernel(empty(Phar::running(false)) ? 'dev' : 'prod', false, $dataDirectory)))->run($input);
